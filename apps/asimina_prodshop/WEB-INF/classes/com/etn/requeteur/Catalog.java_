package com.etn.requeteur;

import java.util.HashMap;
import com.etn.Client.Impl.ClientSql;
import com.etn.beans.Etn;
import com.etn.lang.ResultSet.Set;
import com.etn.requeteur.Types;
import java.util.ArrayList;
import com.etn.lang.ResultSet.ArraySet;

public class Catalog {

final String DEBUTSEP = "`";
final String FINSEP = "`";

Atom atoms[];
Qry qy;

String [] getBetween(Atom a[]){

	String la_table = "";
	String tab[] = new String[2];
	
	int group_between = -1;

	for( int i = 0 ; i < a.length ; i++ )
	  {
	    if( a[i].fct == Types.WHEREABLE ){
	    	if( ( a[i].type & Types.NOP) == 0){
	    		//System.out.println("getBetween 2 : "+a[i].val+"="+a[i].group);
	    		if(a[i].val.equalsIgnoreCase("psdate") ){
	    			group_between = a[i].group;
	    			la_table = a[i].table;
	    		}
	    	}
	    }
	  }
	
	int h = 0;
	for( int i = 0 ; i < a.length ; i++ )
	  {
		 if( a[i].fct == Types.WHEREABLE ){
			 if(a[i].group == group_between){
				 if( a[i].type == Types.CONST  ){
						// a[i].val =  ""+( (int) (Integer.parseInt(a[i].val)/360));
					 	System.out.println(h+"=="+a[i].val);
					  tab[h] =  a[i].val ;
					 h++;		 
				// System.out.println(""+tab[h]);
				 }
			 }
		 }
	  }
		
	//System.out.println("getBetween group_between : " + group_between);
return(tab);	
	
}

boolean check()
{
  int os = 0;
  int minutes=-1;
  String equip = "?";

  for ( int i = 0 ; i < atoms.length ; i++ )
   if( atoms[i].type == Types.LNOM )
     { Atom a = atoms[i];
     //System.out.println(a.val+"====>"+a.con);
     //System.out.println("check()="+atoms[i].champ);


        if( a.con == 0 )
         {
            qy.setErr( "Catalog (non trouvé): "+a.val) ;
            return(false);
         }
       else
       if( os != a.con )
         { if( os != 0 ) qy.multiple = true;
           os = a.con;
         }

  /*** A Afiner
      if( a.ti != null )
        { if( minutes !=  a.ti.minutes )
            if( minutes == -1 ) minutes = a.ti.minutes;
              else { qy.setErr( "Unites de temps disparates: "+a.val) ;
                     return( false);
                   }
          if( equip.equals(a.ti.granularite) == false )
            if( equip.charAt(0) == '?' ) equip = a.ti.granularite;
            else { qy.setErr( "Equipements disparates: "+a.val) ;
                   return( false);
                 }
        }
   ***/

     }



  if( !qy.multiple )
     qy.serveur = os;

  return( true );

}

boolean addInfo( Set rs, HashMap <String,TableInfo>tblInfo )
{
  String v = rs.value("nomlogique");
  int mask = Integer.parseInt( rs.value("filtrable"));
  boolean ok = false;

  // Renseigne les Atoms comportant ce nom logique
  for( int i = 0 ; i< atoms.length ; i++ )
  {

    Atom a = atoms[i];

    //if(v.equalsIgnoreCase(a.val))
    /*if(a.type==11)
    System.out.println("a.type="+a.type+">a.val="+a.val+">v-->"+v+">a.champ="+a.champ);
	*/

    if(  a.type == Types.INTERNE && v.equalsIgnoreCase("psdate") ){
    	  a.con = Integer.parseInt(rs.value("serveur"));
          a.db = rs.value("dbnom");
          a.table = rs.value("dbtable");

          a.champ = qy.psdate;
          System.out.println("psdate addInfo :"+a.champ);
          a.ti = null;
    }



    if( a.type == Types.LNOM  && v.equalsIgnoreCase(a.val) )
    {

    	/*if(v.equalsIgnoreCase("psdate")){
    		a.val = qy.psdate;
    	}*/


    	 a.con = Integer.parseInt(rs.value("serveur"));
         a.db = rs.value("dbnom");
         a.table = rs.value("dbtable");

         a.champ = DEBUTSEP+rs.value("champ")+FINSEP;

         //System.out.println("a.type="+a.type+">a.val="+a.val+"-->"+v);
       // System.out.println("----------->a.table="+a.table+"->a.champ"+a.champ+"<------------------");


         String tcle = ""+a.con+a.db+"."+a.table;
         TableInfo ti = tblInfo.get(tcle);
         if( ti == null )
          { ti =  new TableInfo(
               rs.value("granEquipement"), rs.value("champ_de_jointure"),
               rs.value("granulariteTemporelle"), rs.value("champ_de_jointure_date") );
             tblInfo.put( tcle , ti);
          }
         a.ti = ti;

        ok = true; // au moin un champ
    }


  }


 return( ok);
}

ArrayList<String> getTableContexte(String c){ 
	ArrayList<String> ar = new ArrayList<String>();
	com.etn.lang.ResultSet.Set rsTable = qy.con.execute("select distinct dbtable from catalog where nom_table_ihm = '"+c+"'");
	while(rsTable.next()){
		ar.add(rsTable.value("dbtable"));
	}
	return(ar); 
}
boolean getTableContexte2(ArrayList<String> ar,String t){
	for(int i=0;i<ar.size();i++){
		if(ar.get(i).equals(t)){
			return(true);
		}
	}
	return(false);
}
	
boolean hasDate()
{
  for( int i = 0 ; i < atoms.length ; i++ )
    if( atoms[i].type == Types.PSDATE )
       return( true);
  return( false);
}

/**
* rempli les atoms en perqisitionnant le catalog
*/
public boolean set( )
{
  String wh = null;
  int gran  = qy.granul() ;
 /* int gran  = qy.granul() ;
  if( Types.isGranTime(gran) )
     gran = Types.D_HEURE ;
   else if( ( gran & Types.G_JOUR )!=0 )
      gran = Types.D_JOUR;
   else if( ( gran & Types.G_SEMAINE )!=0 )
      gran = Types.D_SEMAINE;
   else if( ( gran & Types.G_MOIS )!=0 )
      gran = Types.D_MOIS;
   else
      gran = Types.D_MOIS * 60 ;*/
  
  System.out.println("minute="+( gran & Types.G_MINUTE ));
  System.out.println("heure="+( gran & Types.G_HEURE ));
  
  if( ( gran & Types.G_MINUTE )!=0 )
      gran = Types.D_MINUTE;
   else if( ( gran & Types.G_HEURE )!=0 )
      gran = Types.D_HEURE;
   else if( ( gran & Types.G_JOUR )!=0 )
      gran = Types.D_JOUR;
   else if( ( gran & Types.G_SEMAINE )!=0 )
      gran = Types.D_SEMAINE;
   else if( ( gran & Types.G_ANNEE )!=0 )
	      gran = Types.D_ANNEE;
   else if( ( gran & Types.G_MOIS )!=0 )
      gran = Types.D_MOIS;
   else
      gran = Types.D_MOIS * 60 ;

  System.out.println("gran="+gran);
  
  int gEqp = qy.nivEqp;

  //System.out.print("t="+qy.ctx);
  HashMap p = qy.ctx;
  String type_requete = p.get("type")==null?"":(String) p.get("type");
  String psdate = "";
  //System.out.println("type_requete="+type_requete);
  
  String having = p.get("having")==null?"":(String) p.get("having");
  
  boolean heure = p.get("heure")!=null;
  if(heure){
	  gran = Types.D_HEURE;
  }
  System.out.println("heure("+ p.get("heure")+")=="+heure+"==>"+gran);
 // System.out.println(qy.ctx+"==having="+having);
  
  String tab_d[] = getBetween(atoms);
  
  for( int i = 0 ; i < atoms.length ; i++ )
  {
	  //System.out.println("fct:"+atoms[i].table+" -> "+atoms[i].val);

    if( atoms[i].type == Types.LNOM || atoms[i].type == Types.PSDATE )
    {

      if( wh != null ) wh += " or (";
       else wh = "(";

      wh += "nomlogique = '"+atoms[i].val+"'";
      if( atoms[i].val.equalsIgnoreCase("psdate")){
    	  wh+= " and nom_table_ihm='"+type_requete+"'";
      }
      if( atoms[i].fct != 1 ){
         wh += " and filtrable & "+atoms[i].fct;
         System.out.println("fct:"+atoms[i].fct+" -> "+atoms[i].val);
      }

     wh += ")";

    }
  }

  //wh += " and filtrable > 0 ";

  if( wh == null || wh.length() <= 2  )
   {
     qy.setErr( "Requête Inconsistante" );
     return( false);
   }

  java.util.HashMap<String,String> h_col = new java.util.HashMap<String,String>();
  java.util.HashMap<String,String> h_col2 = new java.util.HashMap<String,String>();
  java.util.HashMap<String,String> h_col3 = new java.util.HashMap<String,String>();
  
  java.util.HashMap<String,String> h_table = new java.util.HashMap<String,String>();

  String dbg ;
  Set rs = qy.con.execute( dbg =
   "select "+
   "coalesce(if(granulariteTemporelle='',0,granulariteTemporelle),1440) granulariteTemporelle,"+
   "lower(nomlogique) nomlogique , lower(champ) champ, "+
   "dbtable , dbnom ,serveur, filtrable, "+
   "granEquipement, champ_de_jointure,"+
   "champ_de_jointure_date,nom_table_ihm,valbdd,valihm   from catalog "+
   "inner join serveur o on( o.id = catalog.serveur ) " +
   "where "+
  "("+wh+") and filtrable > 0 and coalesce(granulariteTemporelle,1440) <= "+gran+
  " and dbtable not in(select distinct dbtable from catalog where nom_table_ihm <> '"+type_requete+"' and type1=0)"+
  " order by 2,5,6,1,7 desc");//" order by 2,5,6,1,7 desc"
  //" order by 1,2,7 desc");//" order by 2,5,6,1,7 desc"

  qy.req_catalog = dbg;

  System.out.println( dbg);

  //System.out.println(new String(rs.rs.data));
  
  /*System.out.println("===============	AVANT ajusteTm	===========================");
  for(int j=0;j<rs.Cols;j++)
	  System.out.print(rs.ColName[j]+"\t");
  
  System.out.print("\n");
  while(rs.next()){
	  for(int j=0;j<rs.Cols;j++)
		  System.out.print(rs.value(j)+"\t");
	  
	  System.out.print("\n");
  }
	  
  rs.moveFirst();*/
 
  rs.moveFirst();
  String liste_champ = "";
  while(rs.next()){
	  liste_champ+=(liste_champ.equals("")?"":",")+rs.value("champ"); 
  }
  
  if(! liste_champ.equals("") ){
	  String tab_liste_champ[] = liste_champ.split(",");
	  if( tab_liste_champ.length>0){
	  
	 String sql3="select nomlogique from catalog where valbdd <> '' and (";
	 for(int r=0;r<tab_liste_champ.length;r++){
		 sql3+= (r==0?"":" or")+" valbdd like 'sql:"+tab_liste_champ[r]+"'";
	 }
	 sql3+=")";
	 
	  Set rs3 = qy.con.execute(sql3);
	  System.out.println(" m chemin1  "+sql3);
	  while(rs3.next()){
		  h_col2.put(""+rs3.value("nomlogique").toLowerCase(),"");
	  }
	  }
  }
  rs.moveFirst();
 
//Recupère les tables et/ou noms logiques (avec valbb commençant par sql)
  while(rs.next()){
/*	if(rs.value("valbdd").startsWith("sql")){
		h_col2.put(""+rs.value("nomlogique").toLowerCase(),"");
		h_col3.put("db"+rs.value("dbtable").toLowerCase(),""+rs.value("dbtable").toLowerCase());
//		System.out.println("nomlogique==>"+rs.value("nomlogique").toLowerCase()+"==>"+rs.value("dbtable").toLowerCase());
	}
*/
	if(!rs.value("nom_table_ihm").equalsIgnoreCase(type_requete)){
		h_col.put(""+rs.value("dbtable").toLowerCase(),"");
	}
	
  }
  
  
  java.util.Set lesCles = h_col.keySet() ;
  java.util.Iterator it = lesCles.iterator() ;


  Object o;
  String r="";
  
  
  
  while (it.hasNext()){
      o = it.next();
      if( h_col3.get("db"+o)==null){
    	  r+= " and "+ (""+o)+"=1";
      }
    }
  
  lesCles = h_col2.keySet() ;
  it = lesCles.iterator() ;
  
  while (it.hasNext()){
      o = it.next();
      r+= " and "+ (""+o)+"=1";
      System.out.println("o==>"+o+"==>"+h_col2.get(""+o));
     // h_col.remove(""+h_col2.get(""+o));
    }
 
 
  //Determine quelles sont les tables qui peuvent être intérrogés (seulement Volumétrie Traffic ou QosStreaming) 
  //String sql2 = "SELECT dbtable ,if(DATEDIFF("+tab_d[1]+","+tab_d[0]+")>limit_jour,'oui','non') as diff_d,limit_jour FROM m_chemin m,";
  String sql2 = "SELECT dbtable ,if( ((UNIX_TIMESTAMP("+tab_d[1]+")- UNIX_TIMESTAMP("+tab_d[0]+"))/3600/24)>limit_jour,'oui','non') as diff_d,limit_jour FROM m_chemin m,";
  sql2+="(SELECT max(poids) as p FROM `m_chemin` where nom_table_ihm='"+type_requete+"'  " + r+" and granulariteTemporelle<="+gran+" group by nom_table_ihm) as m2";//and granulariteTemporelle<="+gran+"
  sql2+=" where  m.poids = m2.p and nom_table_ihm='"+type_requete+"' " + r;//m.GranulariteTemporelle = m2.GranulariteTemporelle and
  
  System.out.println(" m chemin  "+sql2);
  
  Set rs2 = qy.con.execute(sql2);
  if(qy.con.LastError!=null && !qy.con.LastError.equals("")){
	  qy.setErr(qy.con.LastError);
	  return(false);
  }
  
 
  while(rs2.next()){
	  h_table.put(""+rs2.value("dbtable").toLowerCase(),""+rs2.value("dbtable").toLowerCase());
	  System.out.println(" diff_d  "+rs2.value("diff_d")+"==>"+rs2.value("limit_jour"));
	  if(rs2.value("diff_d").equals("oui")){
		  h_table.put(""+rs2.value("dbtable").toLowerCase()+"nbr",""+rs2.value("limit_jour"));
	  }
	  
  }
  
  
  
  /*  filtre la requete pour éléminer la table du contexte sélectionné ne répondant pas aux critères (seulement pour les contextes Volumétrie Traffic ou QosStreaming)  
   * et éléminer la table d'information (Ex: table appli ...)  (déterminer par le colonne ayant pour valbdd commençant par sql)   
   */
  int ajout = 0;
  
 
  
  com.etn.lang.ResultSet.ExResult exRs = new com.etn.lang.ResultSet.ExResult(null,rs.ColName,9,10);	
  rs.moveFirst();
  while(rs.next()){
  	//System.out.println("==>"+rs.value(rs.indexOf("SUM(NB_1__DEMANDE)")));
  	//exRs.add();
	  if(rs.value("nom_table_ihm").equalsIgnoreCase(type_requete)){
		  
		  	if(h_table.get(rs.value("dbtable").toLowerCase())!=null){
	  			System.out.println("ajout("+rs.value("nomlogique")+") ==>"+rs.value("dbtable").toLowerCase());
	  			exRs.add();
	  			ajout=1;
	  		}else{
	  			System.out.println("suppr " + rs.value("dbtable").toLowerCase());
	  			ajout=0;
	  		}
	  	}else{
	  		if( h_col3.get("db"+rs.value("dbtable").toLowerCase())==null){
	  			System.out.println("ajout("+rs.value("nomlogique")+") ==>"+rs.value("dbtable").toLowerCase()+"==>"+rs.value("serveur"));
	  			exRs.add();
	  			ajout=1;
	  		}else{
	  			ajout=0;
	  		}
	  	}

		if(ajout==1){
		  for(int k=0;k<rs.Cols;k++){
		  	String v=rs.ColName[k];
		 //	System.out.println("["+k+"]="+v+"==>"+rs.value(v));
		  	exRs.set(k,rs.value(rs.indexOf(v)));
		  }
		  	
		  
		  	exRs.commit();
		}
  }
  rs.moveFirst();
  rs =  new com.etn.lang.ResultSet.ItsResult( exRs.getXdr() );
  rs.moveFirst();
  
  //System.out.println("table_contexte = " +  table_contexte.size() + "==>" + table_contexte.toString() );
  
  if( rs.rs.Rows == 0){
	  qy.setErr( "Compteur(s)/Kpi(s) non disponible.") ;
	  return( false);
  }
  
  
	  
  byte indic[] = ajusteTm( rs );
  if( indic == null )
    return( false);

System.out.println("===============     AVANT compressQry       ===========================");

for(int j=0;j<rs.Cols;j++)
          System.out.print(rs.ColName[j]+"\t");

  System.out.print("\n");
  while(rs.next()){
          for(int j=0;j<rs.Cols;j++)
                  System.out.print(rs.value(j)+"\t");

          System.out.print("\n");
  }

  rs.moveFirst();

  
  
  compressQry( indic , rs,h_table);

System.out.println("===============	APRES compressQry	===========================");
  
  for(int j=0;j<rs.Cols;j++)
	  System.out.print(rs.ColName[j]+"\t");
  
  System.out.print("\n");
  while(rs.next()){
	  for(int j=0;j<rs.Cols;j++)
		  System.out.print(rs.value(j)+"\t");
	  
	  System.out.print("\n");
  }
	  
  rs.moveFirst();
  
  /*while(rs.next()){
	  System.out.println("table="+rs.value("dbtable")+"==>"+h_table.get(""+rs.value("dbtable").toLowerCase()+"nbr"));	 
	  if(rs.value("nom_table_ihm").equalsIgnoreCase(type_requete)){
	  		  if(h_table.get(""+rs.value("dbtable").toLowerCase()+"nbr")!=null){
	  			  //System.out.println("=======================COUCOU==================");
	  			  String msg = "limite de "+h_table.get(""+rs.value("dbtable").toLowerCase()+"nbr")+" dépassé";
	  			  qy.setErr(msg);
	  			  return(false);
	  		  }
	  	  }
  }
  rs.moveFirst();*/
  
  qy.tinf = new HashMap<String,TableInfo>();
  String last = "";
  /*while( rs.next() )
   {
	  if( rs.value("nomlogique").equals("psdate") ){
		  //psdate = rs.value("champ");
		  qy.psdate= rs.value("dbtable")+"."+DEBUTSEP+rs.value("champ")+FINSEP;
	  }


	  String cle= rs.value(1)+rs.value(4)+rs.value(5);
    // System.out.println("cle:"+cle+" -> "+rs.value(3));
     if( last.equals(cle) == false )
      if(addInfo(rs,qy.tinf)) last = cle;
   }*/

  int i = -1;
  while( rs.next() )
   { //String cle= rs.value(1)+rs.value(4)+rs.value(5);
     //System.out.println("cle:"+cle+" -> "+rs.value(3));
     //if( last.equals(cle) == false )
	  
	  if( rs.value("nomlogique").equals("psdate") ){
		  //psdate = rs.value("champ");
		//System.out.println("qy.psdate = "+qy.psdate);
		  //if( qy.psdate.equals("")){
		  qy.psdate= rs.value("dbtable")+"."+DEBUTSEP+rs.value("champ")+FINSEP;
		//}
	  } 
	  
     i++;
     if( indic[i] == 1 )
       addInfo(rs,qy.tinf);
   }

  return( check() );

}

/****/




/**
 * Initialiser le tableau indic :
 * On marque dans le tableau indic le row util pour chaque clef.
 * sous condition == ref
 * retour : 0 Ok
 *          > 0 nouvelle granularite
 *          -1  echec
*/
int setIndic( byte indic[] , int clefs[] , byte stamp[], int ref )
{
 int lastk = 0;
 int j = 1;
 for( int i = 0 ; i < indic.length ; i++ )
 { indic[i] = 0;
   if( clefs[i] == lastk )
     { if( j == 0 ) 
        { if( stamp[i] == ref ) 
          { indic[i] = 1; 
            j = 1; 
          }
          else if( stamp[i] < ref  ) 
               return( stamp[i] );
        }
     }
    else 
     { 
       if( j == 0 ) // pas d'égalisation possible
         return(-1); 
       lastk = clefs[i];
       j = 0;
       i--;
     }
 }   
   
 return(0);
}


byte [] ajusteTm( Set rs )
{
 byte indic[] = new byte[rs.rs.Rows];
 byte stamp[] = new byte[rs.rs.Rows];
 int clefs[] = new int[rs.rs.Rows];

 /**
 * Remplir les 2 tableaux clefs et stamp
 */
 for( int i = 0 ; i < rs.rs.Rows ; i++ )
 { 
   rs.next();
	  stamp[i] = (byte) 0;
   //clefs[i] = (rs.value(1)+rs.value(5)+rs.value(6)).hashCode();
	//  clefs[i] = (rs.value(1)+rs.value(4)+rs.value(5)).hashCode();
	  clefs[i] = (rs.value(1)+rs.value(5)).hashCode();
 }

 rs.moveFirst();

 /**
 * Initialiser le tableau indic : 
 * On marque dans le tableau indic le row util pour chaque clef.
 * sous condition == ref
 */
 int ref =  stamp[0];
 int extref;
 while( true )
 { extref = setIndic( indic , clefs , stamp, 255 & ref );
   if( extref == -1 )
     { qy.setErr("Egalisation temporelle impossible");
       return(null);
      }

   if( extref == 0 )
    {  // Maj de la globale de granularite tempo de la requete
      // setTmQy( ref );
       return( indic );
    }

   System.out.println("On égalise  was:"+ref+"  to:"+ extref);
   ref = extref;
 }


 
}



void arrange( ArrayList<String>elu , ArrayList<String>tbls[] )
{
	System.out.println("===========================	arrange	===========================");
	HashMap p2 = qy.ctx;
	  String type_requete = p2.get("type")==null?"":(String) p2.get("type");
	  int poids_suppl=0;
	
	  ArrayList<String> r =  getTableContexte(type_requete);
	  
	
	// Simple cotation des diverses tables 
 HashMap<String,Integer>cote = new  HashMap<String,Integer>();
 
 for( int i = 0 ; i < tbls.length ; i++ )
	  if( tbls[i] != null )
	   { ArrayList<String> t = tbls[i];
	     for( int j = 0 ; j < t.size(); j++ )
	       { Integer a = cote.get(t.get(j) );
	      
	       if( getTableContexte2(r,(""+t.get(j))  ) ){
	    	   poids_suppl=100;
	       }else{
	    		poids_suppl=0;
	       }
	       
	       /* if( (""+t.get(j)).equalsIgnoreCase(type_requete)){
	    		 poids_suppl=100;
	    		  }else{
	    		poids_suppl=0;
	    	         }*/
	       
	         if( a == null ) cote.put(t.get(j), new Integer(1) + poids_suppl );
	          else cote.put(t.get(j), new Integer( a.intValue()+1) );
	       }
	    }

 // et donc le choix non parfait dans certain cas 
 for( int i = 0 ; i < tbls.length ; i++ )
  if( tbls[i] != null )
   { ArrayList<String> t = tbls[i];
     int point = 0;
     int choix = 0;
     for( int j = 0 ; j < t.size(); j++ )
      { int p = cote.get(t.get(j)).intValue();
        if( p > point ) { point = p; choix = j; }
      }
     String table = t.get(choix);
     if(!elu.contains(table) ) elu.add(table);
    }

}


/**
* On cherche a compresser les diverses tables possibles pour la requete/granul
* indic indique le premier row possible 
*/
void compressQry( byte indic[] , Set rs,HashMap h_table )
{
  
  ArraySet ar = new ArraySet(rs); 
  
  // Les tables elues
  ArrayList<String>elu = new ArrayList<String>();

  // Le nombre de champs
  int nbc = 0;
  for( int i = 0 ; i < indic.length ; i++ )
   if( indic[i] != 0 ) nbc++;

  // Les tables par champ
@SuppressWarnings("unchecked")   // bug java 1.5 sur array
  ArrayList<String>tbls[] = (ArrayList<String>[]) new ArrayList[nbc];
  
  // Init du tableau tbls et elus
  int choix = 0;
  int itbl = 0;
  System.out.println("indic.length="+indic.length);
  for( int i = 0 ; i < indic.length ; i++ ){
	  System.out.println("indic["+i+"]="+indic[i]+": nom "+ar.value(i, "nomlogique")+" table : "+ar.value(i, "dbtable") + "("+ ar.value(i, "granulariteTemporelle") +")");
  }
	  
  
  
  for( int i = 0 ; i < indic.length ; i++ )
    if( indic[i] == 1 ) 
     { 
       ArrayList<String>t = new ArrayList<String>();
       tbls[itbl++] = t;
       int gran = Integer.parseInt( ar.value(i,0) );
       String champ =  ar.value(i, "nomlogique");
       String tbl = ar.value(i,"dbtable");
       System.out.println(champ+"===================="+tbl + " gran =========>'"+gran+"'");
       t.add(tbl);
       int j;


       for( j = i + 1 ;  Integer.parseInt( (ar.value(j,0).equals("")?"0":ar.value(j,0)) ) == gran &&
               champ.equals(  ar.value(j, "nomlogique") ) ; j++ )
         t.add( ar.value(j,"dbtable"));




       if( j == (i+1) ) // Seul table pour ce champ
         { if( !elu.contains(tbl) ) 
             elu.add(tbl);
         }
       else 
          choix++;
     }
       
  
  java.util.HashMap<String,String> table_contexte = new java.util.HashMap<String,String>();
  HashMap p = qy.ctx;
  String type_requete = p.get("type")==null?"":(String) p.get("type");
  for( int i = 0 ; i < indic.length ; i++ ){
	    if( indic[i] == 1 ) 
	     { 
	    	if(ar.value(i,"nom_table_ihm").toLowerCase().equalsIgnoreCase(type_requete.toLowerCase())){
	    		table_contexte.put(ar.value(i,"dbtable").toLowerCase(), "");
	    	}
	     }
  }
  System.out.println("table_contexte = " +  table_contexte.size() + "==>" + table_contexte.toString() );
  if(table_contexte.size()>1){
	  qy.setErr( " KPI/valeurs disponible dans table différente .") ;
	  return;
  }
 
  
  for( int i = 0 ; i < indic.length ; i++ )
	    if( indic[i] == 1 ) 
	     { 
  if(h_table.get(""+ar.value(i,"dbtable").toLowerCase()+"nbr")!=null){
		  //System.out.println("=======================COUCOU==================");
	  	  //String msg = "limite de "+h_table.get(""+ar.value(i,"dbtable").toLowerCase()+"nbr")+" dépassé";  
	  	  String msg = "La configuration de votre requête ne permet pas de la lancer sur plus de "+h_table.get(""+ar.value(i,"dbtable").toLowerCase()+"nbr")+" jours.\n";
		  msg+="Merci donc de réduire la période de temps filtrée à "+h_table.get(""+ar.value(i,"dbtable").toLowerCase()+"nbr")+" jours, ou de retirer certains paramètres de filtre/agrégation afin de pouvoir requêter sur un nombre de jours plus grand.";
		  msg+="Pour plus de détail voir : http://shp.itn.ftgroup/sites/Sharepoint_PROJET_OTARIE / Doc partagées / Otarie Mobile / Aide en  ligne Query / Limitation temps.doc";
		  qy.setErr(msg);
		  return;
	  }
	     }
  
  System.out.println("CHOIX : " + choix);      
  // Si pas de choix ... pas d'optimisation     
  if( choix == 0 ) return;

  // On réduit le tableau tbls :
  // On choisit les tables obligatoires pour 
  // Les champs multivalués.
  choix = 0;
  for( int i = 0 ; i < nbc ; i++ )
    if( tbls[i].size() == 1 )
       tbls[i] = null;
    else
    { ArrayList<String>t = tbls[i];
      for( int j = 0 ; j < t.size(); j++ )
       if( elu.contains(t.get(j)) )
         { tbls[i] = null;  break; }
    }
  

  // Les choix restants
  choix = 0;
  for( int i = 0  ; i < nbc ; i++ )
    if( tbls[i] != null ) 
       choix++;

  // Choisir par arrangement
  if( choix != 0 )
   arrange( elu , tbls );

  // Finalement maj de tableau indic
  for( int i = 0 ; i < indic.length ; i++ )
  if( indic[i] != 0 )
  { String tbl = ar.value(i,"dbtable");
    if( elu.contains(tbl) ) 
      continue;
    int j = i+1;
    while( !elu.contains( ar.value(j,"dbtable") ) )
      if(++j == indic.length || indic[j] != 0) 
           return;  // ???
    indic[i] = 0 ; indic[j] = 1; i = j;
  }

}
/****/


public Catalog( Qry q)
{
   qy = q;
   atoms = qy.atoms;
}




}
